#+TITLE: Parsing Command Line Arguments
#+AUTHOR: Mark Cox

A simple mechanism for processing command line arguments.

* Usage
Lets say you have written a program which has the following usage:

#+begin_src text
Usage: [options] <in> <out>

Options:
  --help             This helpful message.
  --alpha <alpha>    Change the alpha value.
#+end_src

#+begin_src c++
  #include <command-line-arguments/command-line-arguments.hpp>

  struct Configuration
  {
    std::string in, out;
    double alpha;
  };

  int
  process_arguments(int argc, char **argv)
  {
    Configuration cfg;
    CommandLineArgument<string> in;
    CommandLineArgument<string> out;

    for (int i = 1; i < argc; i++) {
      string arg = argv[i];
      if (arg == "--help") {
        print_usage();
        return 0;
      } else if (arg == "--alpha") {
        get_command_line_argument(&cfg.alpha, &i, argc, argv);
      } else if (command_line_option_p(arg)) {
        throw unsupported_option_error(arg);
      } else if (!assign_argument(arg, in, out)) {
        throw excess_argument_error(arg);
      }
    }

    if (!have_arguments_p(in, out))
      throw not_enough_arguments_error();

    cfg.in = *in;
    cfg.out = *out;

    return run_program(cfg);
  }
#+end_src

Errors which can be generated by the operators in this library are
#+begin_src c++
  try {
    return process_arguments(argc, argv);
  } catch (not_enough_arguments_error &e) {
    // Not enough arguments have been provided.

  } catch (excess_argument_error &e) {
    // Too many arguments were provided.

  } catch (missing_argument_value_error &e) {
    // A value has not been provided for a specific option.

  } catch (unsupported_option_error &e) {
    // The application cannot process a specified option.

  } catch (std::runtime_error &e) {
    // The application has attempted to dereference an instance of
    // CommandLineArgument or get_command_line_argument is unable to
    // convert a string to numeric type.

  }
#+end_src

* Installation
The command line arguments library requires CMake version 3.4.2 and a
C++11 compiler.

The tests provided with the library require [[https://github.com/markcox80/catch-cmake][catch-cmake]] to be
installed.

#+begin_src sh
  # Variables:
  #   SOURCE_PREFIX      The location of the command-line-arguments
  #                      source.
  #   INSTALL_PREFIX     Where to install the library.
  #   CATCH_PREFIX       Where catch-cmake was installed.

  mkdir ${TMPDIR}/build
  cd ${TMPDIR}/build
  cmake ${SOURCE_PREFIX} \
    -DCMAKE_INSTALL_PREFIX=${INSTALL_PREFIX} \
    -DCMAKE_PREFIX_PATH=${CATCH_PREFIX}
  make
  make tests
  make install
#+end_src

The installation also installs files to allow CMake to find the
library.
#+begin_src CMake
find_package(command-line-arguments REQUIRED)
target_link_libraries(my-exe command-line-arguments)
#+end_src
